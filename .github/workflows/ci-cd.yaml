name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Provision Infrastructure
    runs-on: ubuntu-latest

    outputs:
      s3_bucket: ${{ steps.tf-output.outputs.s3_bucket }}
      lambda_name: ${{ steps.tf-output.outputs.lambda_name }}

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init -input=false

      - name: Pre-import existing resources
        run: |
          set -e

          # Import S3 bucket if it exists
          BUCKET="luffy-utrains-5000e"
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "✅ Bucket exists. Importing into Terraform state..."
            terraform import aws_s3_bucket.frontend "$BUCKET" || echo "Already imported."
          fi

          # Import DynamoDB table if it exists
          TABLE="userserverless"
          if aws dynamodb describe-table --table-name "$TABLE" 2>/dev/null; then
            echo "✅ Table exists. Importing into Terraform state..."
            terraform import aws_dynamodb_table.users "$TABLE" || echo "Already imported."
          fi

          # Import IAM role if it exists
          ROLE="lambda_exec_role"
          if aws iam get-role --role-name "$ROLE" 2>/dev/null; then
            echo "✅ IAM Role exists. Importing into Terraform state..."
            terraform import aws_iam_role.lambda_exec "$ROLE" || echo "Already imported."
          fi

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - id: tf-output
        run: |
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "lambda_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT

  frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - run: |
          BUCKET=${{ needs.terraform.outputs.s3_bucket }}
          aws s3 sync ./s3_files s3://$BUCKET --delete

  backend:
    name: Deploy Lambda
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - run: |
          cd lambda
          zip -r ../lambda.zip .
          cd ..
          aws lambda update-function-code \
            --function-name ${{ needs.terraform.outputs.lambda_name }} \
            --zip-file fileb://lambda.zip
