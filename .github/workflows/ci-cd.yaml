name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    outputs:
      cloudfront_id: ${{ steps.tf-output.outputs.cloudfront_id }}
      lambda_name: ${{ steps.tf-output.outputs.lambda_name }}
      s3_bucket: ${{ steps.tf-output.outputs.s3_bucket }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf-output
        run: |
          echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "lambda_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT

  frontend:
    name: Deploy Frontend (S3 + CloudFront)
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Sync Static Files to S3
        run: |
          set -e
          BUCKET=${{ needs.terraform.outputs.s3_bucket }}
          aws s3 sync ./s3_files s3://$BUCKET --delete

      - name: Invalidate CloudFront Cache
        run: |
          set -e
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.cloudfront_id }} \
            --paths "/*"

  backend:
    name: Deploy Lambda Function
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Package Lambda
        run: |
          set -e
          cd lambda
          zip -r ../lambda.zip *.py
          cd ..

      - name: Update Lambda Code
        run: |
          set -e
          aws lambda update-function-code \
            --function-name ${{ needs.terraform.outputs.lambda_name }} \
            --zip-file fileb://lambda.zip
