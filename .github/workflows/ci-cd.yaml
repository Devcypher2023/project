name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Provision Infrastructure
    runs-on: ubuntu-latest

    outputs:
      s3_bucket: ${{ steps.tf-output.outputs.s3_bucket }}
      lambda_name: ${{ steps.tf-output.outputs.lambda_name }}
      api_id: ${{ steps.tf-output.outputs.api_id }}

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init & Validate
        run: |
          terraform init -input=false
          terraform validate

      - name: Import Existing Resources (if any)
        run: |
          # Import S3 bucket if exists
          BUCKET="luffy-utrains-5000e"
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket exists, importing..."
            terraform import aws_s3_bucket.frontend "$BUCKET" || echo "Already imported."
          fi

          # Import DynamoDB table if exists
          TABLE="userserverless"
          if aws dynamodb describe-table --table-name "$TABLE" 2>/dev/null; then
            echo "DynamoDB table exists, importing..."
            terraform import aws_dynamodb_table.users "$TABLE" || echo "Already imported."
          fi

          # Import Lambda role if exists
          ROLE="lambda_exec_role"
          if aws iam get-role --role-name "$ROLE" 2>/dev/null; then
            echo "IAM Role exists, importing..."
            terraform import aws_iam_role.lambda_exec "$ROLE" || echo "Already imported."
          fi

      - name: Terraform Apply
        run: |
          set -e
          terraform apply -auto-approve -input=false || (
            echo "Retrying apply in 10s..."
            sleep 10
            terraform apply -auto-approve -input=false
          )

      - id: tf-output
        run: |
          # Safely get Terraform outputs
          LAMBDA_NAME=$(terraform output -raw lambda_function_name 2>/dev/null || echo "")
          S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          API_ID=$(terraform output -raw api_gateway_id 2>/dev/null || echo "")

          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "api_id=$API_ID" >> $GITHUB_OUTPUT

  backend:
    name: Deploy Lambda
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Build Lambda ZIP
        run: |
          cd lambda
          zip -r ../lambda.zip .
          cd ..

      - name: Update or Create Lambda Function
        run: |
          LAMBDA_NAME=${{ needs.terraform.outputs.lambda_name }}
          if [ -z "$LAMBDA_NAME" ]; then
            echo "Lambda name not available from Terraform output. Skipping deployment."
            exit 0
          fi

          if aws lambda get-function --function-name "$LAMBDA_NAME" 2>/dev/null; then
            echo "Lambda exists, updating code..."
            aws lambda update-function-code \
              --function-name "$LAMBDA_NAME" \
              --zip-file fileb://lambda.zip
          else
            echo "Lambda does not exist. Deploy it manually via Terraform."
            exit 1
          fi

  frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: backend

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Sync Frontend Files to S3
        run: |
          BUCKET=${{ needs.terraform.outputs.s3_bucket }}
          aws s3 sync ./s3_files s3://$BUCKET --delete
