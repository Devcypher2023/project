name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Provision Backend Infrastructure
    runs-on: ubuntu-latest

    outputs:
      lambda_name: ${{ steps.tf-output.outputs.lambda_name }}
      api_id: ${{ steps.tf-output.outputs.api_id }}
      dynamodb_table: ${{ steps.tf-output.outputs.dynamodb_table }}

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init & Validate
        run: |
          terraform init -input=false
          terraform validate

      - name: Terraform Apply Backend
        run: |
          terraform apply -auto-approve -input=false

      - id: tf-output
        run: |
          echo "lambda_name=$(terraform output -raw lambda_function_name 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "api_id=$(terraform output -raw api_gateway_id 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "dynamodb_table=$(terraform output -raw dynamodb_table_name 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

  frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Sync Frontend Files to S3
        run: |
          # Get S3 bucket name from Terraform output
          BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo '')
          if [ -z "$BUCKET" ]; then
            echo "S3 bucket name not found. Skipping frontend deployment."
            exit 0
          fi
          aws s3 sync ./s3_files s3://$BUCKET --delete

  lambda_update:
    name: Update Lambda Code
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ACTION_ROLE }}
          aws-region: us-east-1

      - name: Build Lambda ZIP
        run: |
          cd lambda
          zip -r ../lambda.zip .
          cd ..

      - name: Update Lambda Function
        run: |
          LAMBDA_NAME=${{ needs.terraform.outputs.lambda_name }}
          if [ -z "$LAMBDA_NAME" ]; then
            echo "Lambda name not available from Terraform output. Skipping deployment."
            exit 0
          fi

          if aws lambda get-function --function-name "$LAMBDA_NAME" 2>/dev/null; then
            echo "Lambda exists, updating code..."
            aws lambda update-function-code \
              --function-name "$LAMBDA_NAME" \
              --zip-file fileb://lambda.zip
          else
            echo "Lambda does not exist. Deploy it manually via Terraform."
            exit 1
          fi
